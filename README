StubSpy

Hack one ticket into a day at the movies.

Choose your location and let StubSpy do the rest!

==todo

UI
revamp results screen
       change to display one theater
       	      ?REST paths then?
	      the entire result set is large...~ 200k avg 2megs w/ times sq - unreasonsable
	      POST requests?       	      

	      !best compromise is to ignore restful paths; generate the first request, and then accept POST?
	      	   - will need a cache
		   what do I gain by REST
		   	'built-in' persistence model
		REST WONT ALLOW USER FILTERS TO MAINTAIN STATE				 


		how to deal w/ really large results?
		    GET: gets 1?
		    	 but we need aggregate information 
			     i.e. list of scrollable movies

		real question --> is do we generate all results?  YES.
		     we create a json path for only that specific movie?		     	
		     ok so we generate all datga, persist everything but only transmit the first movie to the client
		     and subsequent requests wil have data tfor any call

		     so now if i persist - do i need a model?  tid by key-value store should work
		     	mongodb vs redis...
				seems like mongodb maybe best


	     probably add a date filter (main page & subsequent choice)


       link theaters

       thin down hipmunk strips

       add time dividers/indicators downward


link from theater to results show

change movie-select color


MODEL
JS: on movie click, filter by movie results
JS: on time selection, filter by time;

remove "close dupes" from schedule (i.e. 3d vs imax vs reg)


add social links

===    

*revamp input and display
      "choose your own adventure" style; sequential, progressive inputs?


Location --> 
	 Choose a Movie  || Start Time



USE CASES:
    *spend a day at the theater = movie "agnostic"
    	   SCORE / LOCATION
    *i want to see a particular movie, can I sneak into another one since I'm here
       	    MOVIE / TIME

DEBATE:
	SEQUENTIAL :choose adventure"
		   these are all inpus that you want flexibility for each one
	cons
		   don't want to be "locked" into a choice, and then have
		   to start all over
	pros
		choice clarity

	HIPMUNK
	cons
		information overload
		too redundant
	pro
		quick to scroll through relative times

		    
	BLEND?
	want:
		choice clarity & simplicity
		visual gauge / representation
		

	inputs:
		location (done)

		time range
		movie
		



check for dupes (i.e. imax vs 3d vs regular) movies and exclude from ranking



